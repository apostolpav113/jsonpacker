/**
  @file
  @brief Header file with description of classes used to parse command line arguments
  **/

#ifndef APPOPTIONS_H
#define APPOPTIONS_H

#include <string>
#include <map>
#include <boost/program_options.hpp>

using namespace std;

#define OPTION_DESC "JSON Packer Options"

namespace app_opt {

class ApplicationOptions;

/**
  @defgroup JSONPACKER_OPTIONS JSON packer command line parsing classes
  @{
  **/

/**
 * @brief The ApplicationOption class represent command line argument (option)
 */
class ApplicationOption {
public:
	/**
	 * @brief ApplicationOption constructor
	 * @param[in] parent Pointer to ApplicationOptions; this pointer is used to automatically register application option in collection
	 * @param[in] name full argument name
	 * @param[in] shortname short argument name
	 * @param[in] description short description of argument, used to show information in help
	 * @param[in] value_required the option defining is argument required or not
	 * @param[in] default_value the default value for the argument, is used when argument is not passed in command line
	 */
	ApplicationOption(ApplicationOptions* parent, const string& name, const string& shortname, const string& description, bool value_required = true, const string& default_value = "");

	/**
	 * @brief Exists allows to determine that argument was passed in command line
	 * @return true if argument is present in command line, false - otherwise
	 */
	bool Exists() {return m_exists;}

	/**
	 * @brief Value allows to determine the value of passed argument
	 * @return string representation of argument value
	 */
	string Value() {return m_value;}
private:
	ApplicationOptions* m_parent; /// pointer to instance of ApplicationOptions class
	string m_name; /// full name of argument
	string m_shortname; ///short name of argument
	string m_description; ///description of argument
	bool m_value_required; ///option defining is argument required or not
	string m_default_value; ///default value for argument
	bool m_exists; ///option defining is argument present in command line or not
	string m_value; ///value of argument

	friend class ApplicationOptions;
};

/**
 * @brief The ApplicationOptions class is used to describe command line arguments of the program
 */
class ApplicationOptions {
public:
	/**
	 * @brief ApplicationOptions constructor
	 * @param argc[in] count of command line arguments (the same as in main() function)
	 * @param argv[in] command line arguments (the same as in main() function)
	 */
	ApplicationOptions(int argc, char *argv[]);

	/**
	 * @brief PrintHelp prints help information in stdout
	 */
	void PrintHelp();

	/**
	 * @brief IsValid determines wether the command line contains valid argumetns or not
	 * @return true if command line contains valid argumetns, false otherwise
	 */
	bool IsValid();

	/**
	  @brief 'help' argument - with this argument program do nothing but prints help information
	  **/
	ApplicationOption Help {this, "help", "h", "Show help", false};
	/**
	  @brief 'method' argument - is used to determine the file processing mode (either 'JSON to TLV' conversion or 'TLV to JSON');
			  possible values: json2tlv (default), tlv2json
	  **/
	ApplicationOption Method {this, "method", "m", "Input file convertion method. Default value is json2tlv. You can use also tlv2json to unpack binary data.", true, "json2tlv"};
	/**
	  @brief 'input' argument - the input file name; must be the valid name of file containing data in format depending on value of 'method' argument;
			  if 'method' is json2tlv input file must comtain valid JSON-records separated by new line;
			  if 'method' is tlv2json input file must comtain valid data in TLV-format generated by this program
	  **/
	ApplicationOption InputFile {this, "input", "i", "Input file name"};
	/**
	  @brief 'output' argument - the output file name; must be the valid name of file which will be overwriten with data in JSON ot TLV format depending on value of 'method' argument
	  **/
	ApplicationOption OutputFile {this, "output", "o", "Output file name"};
	/**
	  @brief 'force' argument - allows to work with already existing output file, passing this argument concludes in erasing all data in existing output file
	  **/
	ApplicationOption Force {this, "force", "f", "Owerwrite output file if exists", false};
private:
	boost::program_options::options_description m_options_description;
	static std::map<string, ApplicationOption*> m_options;///collection of command arguments (ApplicationOption class instances)


	friend class ApplicationOption;
};

/**
  @}
  **/

} // end of namespace app_opt

#endif // APPOPTIONS_H
